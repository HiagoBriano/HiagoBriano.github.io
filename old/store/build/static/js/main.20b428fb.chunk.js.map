{"version":3,"sources":["Components/ShoppingCartButton.js","Components/CategoryItem.js","services/api.js","Components/CategoryList.js","Components/ItemCard.js","Components/List.js","Components/Home.js","pages/ItemPage.js","pages/ShoppingCart.js","pages/Redirect.js","App.js","serviceWorker.js","index.js"],"names":["ShoppingCartButton","quantity","this","props","to","data-testid","className","type","src","alt","Component","CategoryItem","category","onChange","id","htmlFor","name","value","getCategories","a","fetch","response","json","getProductsFromCategoryAndQuery","categoryId","query","getDetailsById","productId","CategoryList","fetchCategories","api","data","setState","categories","state","map","key","React","ItemCard","title","thumbnail","price","addProduct","onClick","List","target","product","localStorage","list","JSON","parse","setItem","stringify","results","length","result","Home","queryFunc","input","idValue","categoryFunc","inputValue","control","changeInput","e","enterFunc","preventDefault","handleCategoryChange","quantityOnCart","getItem","ItemPage","fetcher","MLB","window","location","pathname","match","details","placeholder","required","ShoppingCart","botao","event","nomeButton","products","find","index","volume","items","item","console","log","getProductLocal","fetchProductDetails","productDetails","prevState","toFixed","Redirect","path","exact","App","basename","process","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.20b428fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropType from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport default class ShoppingCartButton extends Component {\n  render() {\n    const { quantity } = this.props;\n    return (\n      <Link to=\"/shoppingcart\" data-testid=\"shopping-cart-button\">\n        <button className=\"shoppingCartButton\" type=\"button\">\n          <img src=\"https://cdn-icons-png.flaticon.com/512/1374/1374128.png\" alt=\"Carrinho de compras.\" />\n          <span>{ ` ${quantity}` }</span>\n        </button>\n      </Link>\n    );\n  }\n}\n\nShoppingCartButton.propTypes = {\n  quantity: PropType.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class CategoryItem extends Component {\n  render() {\n    const { category, onChange, id } = this.props;\n\n    return (\n      <li>\n        <label htmlFor={ `${id}` }>\n          { category }\n          <input\n            className=\"reto\"\n            type=\"radio\"\n            name=\"category\"\n            value={ category }\n            onChange={ () => onChange(id) }\n            data-testid=\"category\"\n          />\n        </label>\n      </li>\n    );\n  }\n}\n\nCategoryItem.propTypes = {\n  category: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n};\n","export async function getCategories() {\n  const response = await fetch('https://api.mercadolibre.com/sites/MLB/categories');\n  return response.json();\n}\n\nexport async function getProductsFromCategoryAndQuery(categoryId, query) {\n  const response = await fetch(`https://api.mercadolibre.com/sites/MLB/search?category=${categoryId}&q=${query}`);\n  return response.json();\n}\n\nexport async function getResultsBySearch(query) {\n  const response = await fetch(`https://api.mercadolibre.com/sites/MLB/search?q=${query}`);\n  return response.json();\n}\n\nexport async function getResultsByCategory(categoryId) {\n  const response = await fetch(`https://api.mercadolibre.com/sites/MLB/search?category=${categoryId}`);\n  return response.json();\n}\n\nexport async function getDetailsById(productId) {\n  const response = await fetch(`https://api.mercadolibre.com/items/${productId}`);\n  return response.json();\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CategoryItem from './CategoryItem';\n\nimport * as api from '../services/api';\n\nclass CategoryList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      categories: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchCategories();\n  }\n\n  fetchCategories = async () => {\n    const data = await api.getCategories();\n\n    if (data) this.setState({ categories: data });\n  };\n\n  render() {\n    const { categories } = this.state;\n    const { onChange } = this.props;\n\n    return (\n      <ul className=\"categoriaForm\">\n        {categories.map(({ id, name }) => (\n          <CategoryItem\n            key={ id }\n            category={ name }\n            onChange={ onChange }\n            id={ id }\n          />\n        ))}\n      </ul>\n    );\n  }\n}\n\nCategoryList.propTypes = {\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default CategoryList;\n","import React, { Component } from 'react';\nimport PropType from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport default class ItemCard extends Component {\n  render() {\n    const { title, thumbnail, price, id, addProduct } = this.props;\n    return (\n      <Link\n        data-testid=\"product-detail-link\"\n        to={ `/itemdetails/${id}` }\n      >\n        <li\n          data-testid=\"product\"\n          className=\"item\"\n        >\n          <span>{ title }</span>\n          <img src={ thumbnail } alt={ title } />\n          <span>{ price }</span>\n          <button\n            type=\"button\"\n            id={ id }\n            data-testid=\"product-add-to-cart\"\n            onClick={ addProduct }\n          >\n            Add ao carrinho\n          </button>\n        </li>\n      </Link>\n    );\n  }\n}\n\nItemCard.propTypes = {\n  title: PropType.string.isRequired,\n  thumbnail: PropType.string.isRequired,\n  price: PropType.number.isRequired,\n  id: PropType.string.isRequired,\n  addProduct: PropType.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropType from 'prop-types';\nimport ItemCard from './ItemCard';\n\nexport default class List extends Component {\n  addProduct({ target }) {\n    const { product } = localStorage;\n    const list = JSON.parse(product);\n\n    localStorage.setItem('product', JSON.stringify([...list, target.id]));\n  }\n\n  render() {\n    const { results } = this.props;\n    return (\n      results.length > 0\n        ? (\n          <ul className=\"items-Card\">\n            { results.map((result) => (\n              <ItemCard\n                key={ result.id }\n                { ...result }\n                addProduct={ this.addProduct }\n              />\n            ))}\n          </ul>\n        )\n        : <h3>Nenhum produto foi encontrado</h3>\n    );\n  }\n}\n\nList.propTypes = {\n  results: PropType.arrayOf(PropType.object).isRequired,\n};\n","import React, { Component } from 'react';\nimport ShoppingCartButton from './ShoppingCartButton';\nimport CategoryList from './CategoryList';\nimport List from './List';\nimport * as api from '../services/api';\n\nexport default class Home extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      inputValue: '',\n      idValue: '',\n      quantityOnCart: 0,\n      results: [],\n      control: 0,\n    };\n  }\n\n  componentDidMount() {\n    const results = localStorage.getItem('product');\n\n    if (results === null) {\n      localStorage.setItem('product', JSON.stringify([]));\n    }\n  }\n\n  componentDidUpdate() {\n    const { control, inputValue } = this.state;\n    if (control === 1) {\n      const { idValue } = this.state;\n      this.categoryFunc(idValue, inputValue);\n    }\n  }\n\n  queryFunc = async (input) => {\n    const { idValue } = this.state;\n    const response = await api.getProductsFromCategoryAndQuery(idValue, input);\n    this.setState({\n      results: response.results,\n    });\n  }\n\n  categoryFunc = async (id, inputValue) => {\n    const response = await api.getProductsFromCategoryAndQuery(id, inputValue);\n    this.setState({\n      results: response.results,\n      control: 0,\n    });\n  }\n\n  changeInput = (e) => {\n    this.setState({\n      inputValue: e.target.value,\n    });\n  }\n\n  enterFunc = (e) => {\n    e.preventDefault();\n    const { inputValue } = this.state;\n    this.queryFunc(inputValue);\n  }\n\n  handleCategoryChange = (id) => {\n    this.setState({\n      idValue: id,\n      control: 1,\n    });\n  };\n\n  render() {\n    const { inputValue, quantityOnCart, results } = this.state;\n    return (\n      <main>\n        <section className=\"menu\">\n          <form className=\"formMenu\">\n            <label htmlFor=\"get\">\n              <input\n                type=\"text\"\n                data-testid=\"query-input\"\n                value={ inputValue }\n                onChange={ this.changeInput }\n                id=\"get\"\n              />\n              <button\n                type=\"submit\"\n                data-testid=\"query-button\"\n                onClick={ this.enterFunc }\n                id=\"get\"\n              >\n                Buscar!\n              </button>\n            </label>\n            <br />\n            <span\n              data-testid=\"home-initial-message\"\n            >\n              Digite algum termo de pesquisa ou escolha uma categoria.\n            </span>\n          </form>\n\n          <ShoppingCartButton quantity={ quantityOnCart } />\n        </section>\n        <section className=\"mainSearch\">\n          <CategoryList\n            onChange={ this.handleCategoryChange }\n          />\n          { results.length > 0\n          && <List results={ results } />}\n        </section>\n      </main>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ShoppingCartButton from '../Components/ShoppingCartButton';\nimport * as api from '../services/api';\n\nexport default class ItemPage extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      details: {},\n      id: '',\n    };\n  }\n\n  componentDidMount() {\n    this.fetcher();\n  }\n\n  fetcher = async () => {\n    /* regex for getting everything after last slash\n    https://stackoverflow.com/questions/8945477/regular-expression-for-getting-everything-after-last-slash */\n    const MLB = window.location.pathname.match(/[^/]+$/);\n    this.setState({\n      details: await api.getDetailsById(MLB),\n      id: MLB,\n    });\n  }\n\n  addProduct = ({ target }) => {\n    const { product } = localStorage;\n    const list = JSON.parse(product);\n\n    localStorage.setItem('product', JSON.stringify([...list, target.id]));\n  }\n\n  render() {\n    const { details, id } = this.state;\n    return (\n      <>\n        <ShoppingCartButton quantity={ 0 } />\n        <section>\n          <h2 data-testid=\"product-detail-name\">{details.title}</h2>\n        </section>\n        <button\n          type=\"button\"\n          id={ id }\n          data-testid=\"product-detail-add-to-cart\"\n          onClick={ this.addProduct }\n        >\n          Add ao carrinho\n        </button>\n        <section>\n          <h3>Avaliações</h3>\n          <form>\n            <input placeholder=\"Email\" type=\"email\" required />\n            <input\n              placeholder=\"Mensagem (opcional)\"\n              data-testid=\"product-detail-evaluation\"\n              type=\"textarea\"\n            />\n          </form>\n        </section>\n      </ >\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class ShoppingCart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      products: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getProductLocal();\n  }\n\n  getProductLocal() {\n    const { product } = localStorage;\n    const productList = JSON.parse(product);\n\n    productList.map(async (id) => {\n      const fetchProductDetails = await fetch(`https://api.mercadolibre.com/items/${id}`);\n      const productDetails = await fetchProductDetails.json();\n      productDetails.volume = 1;\n      console.log(productDetails);\n      this.setState((prevState) => (\n        { products: [...prevState.products, productDetails] }));\n    });\n  }\n\n  botao = (event) => {\n    const { id, name: nomeButton } = event.target;\n    const { products } = this.state;\n\n    // referencia: https://stackoverflow.com/questions/29537299/react-how-to-update-state-item1-in-state-using-setstate\n    products.find(({ title, volume }, index) => {\n      if (title === id) {\n        const items = [...products];\n        const item = { ...items[index] };\n        if (volume > 0 && nomeButton === 'down') {\n          item.volume -= 1;\n          console.log(nomeButton);\n          console.log(volume);\n        } if (volume >= 0 && nomeButton === 'up') {\n          item.volume += 1;\n          console.log(nomeButton);\n          console.log(volume);\n        }\n        items[index] = item;\n        this.setState({ products: [...items] });\n      }\n      return null;\n    });\n  }\n\n  render() {\n    const { products } = this.state;\n\n    if (products.length < 1) {\n      return (\n        <span data-testid=\"shopping-cart-empty-message\">\n          Seu carrinho está vazio\n        </span>\n      );\n    }\n\n    return (\n      <div>\n        <span data-testid=\"shopping-cart-product-quantity\">{ products.length }</span>\n        { products.map(({ title, volume, price }) => (\n          <div key={ `${title}` }>\n            <h3 data-testid=\"shopping-cart-product-name\">{`${title}`}</h3>\n            <button\n              type=\"button\"\n              name=\"down\"\n              onClick={ this.botao }\n              id={ title }\n              data-testid=\"product-decrease-quantity\"\n            >\n              -\n            </button>\n            <span>{` ${volume} `}</span>\n            <button\n              type=\"button\"\n              name=\"up\"\n              onClick={ this.botao }\n              id={ title }\n              data-testid=\"product-increase-quantity\"\n            >\n              +\n            </button>\n            <span>{` ${(price * volume).toFixed(2)} `}</span>\n          </div>\n        ))}\n        {/* { products.map(({ id, title, thumbnail, price }) => (\n          <div key={ id }>\n            <h1 data-testid=\"shopping-cart-product-name\">{ title }</h1>\n            <img src={ thumbnail } alt={ title } />\n            <p>{ price }</p>\n          </div>\n        )) } */}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Route, Switch } from 'react-router';\nimport Home from '../Components/Home';\nimport ItemPage from './ItemPage';\nimport ShoppingCart from './ShoppingCart';\n\nexport default class Redirect extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Home />\n        </Route>\n        <Route path=\"/shoppingcart\">\n          <ShoppingCart />\n        </Route>\n        <Route path=\"/itemdetails/:MLB\">\n          <ItemPage />\n        </Route>\n      </Switch>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport Redirect from './pages/Redirect';\n\nfunction App() {\n  return (\n    <BrowserRouter basename={ process.env.PUBLIC_URL }>\n      <Redirect />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  const NOT_FOUND = 404;\n  const NOT_FOUND_IN_ARRAY = -1;\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  }).then((response) => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === NOT_FOUND\n        || (contentType != null\n          && contentType.indexOf('javascript') === NOT_FOUND_IN_ARRAY)) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}